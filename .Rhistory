json_str2 <- paste(json2[1], collapse = "")
json_str2
class(json2[1]$bpi$`2015-04-11`)
Sys.Date()-30
Sys.Date()-31
price
Begin()
Sys.Date()-31
b <- '2015-04-11'
json2[1]$bpi$b
json2[1]$bpi$'2015-04-11'
json2[1]$bpi$b
$'2015-04-11'
names(json2[1])
json2[1]$bpi
json2[1]$bpi[1]
json2[1]$bpi[[1]]
names(json2[1]$bpi[[1]])
json2['2015-04-11']
json2[2015-04-11]
json2[1]
json2[2]
json2$bpi
json2$bpi$'Sys.Date()-31'
json2$bpi$'Sys.Date()'
json2$bpi$'2015-05-08'
json2[1]$bpi[[1]]
json2[1]$bpi[1]
names(json2)
x <- c("yes", "no", "maybe", "no", "no", "yes")
y <- c("red", "blue", "green", "green", "orange")
list.xy <- list(x=x, y=y)
WORD.C <- function(WORDS){
require(wordcloud)
L2 <- lapply(WORDS, function(x) as.data.frame(table(x), stringsAsFactors = FALSE))
# Takes a dataframe and the text you want to display
FUN <- function(X, text){
windows()
wordcloud(X[, 1], X[, 2], min.freq=1)
mtext(text, 3, padj=-4.5, col="red")  #what I'm trying that isn't working
}
# Now creates the sequence 1,...,length(L2)
# Loops over that and then create an anonymous function
# to send in the information you want to use.
lapply(seq_along(L2), function(i){FUN(L2[[i]], names(L2)[i])})
# Since you asked about loops
# you could use i in seq_along(L2)
# instead of 1:length(L2) if you wanted to
#for(i in 1:length(L2)){
#  FUN(L2[[i]], names(L2)[i])
#}
}
WORD.C(list.xy)
m <- matrix(data=cbind(rnorm(30, 0), rnorm(30, 2), rnorm(30, 5)), nrow=30, ncol=3)
m
apply(m, 1, mean)
apply(m, 2, mean)
apply(m, 2, function(x) is.matrix())
apply(m, 2, function(x) is.matrix(x))
lapply(1:3, function (x) x^2)
1:3
class(1:3)
lapply(json2, function (x) x^2)
lapply(json2, function (x) x)
json2[1]
lapply(json2, function (x) x)
lapply(json2, function (x) x)
lapply(json2[1], function (x) x)
unlist(lapply(json2[1], function (x) x))
head(unlist(lapply(json2[1], function (x) x)))
json3 <- unlist(lapply(json2[1], function (x) x))
json3
json3[1[]]
json3[1
]
head(price)
Begin <- function(){
rm(list=ls())
#import data from csv:
price <<- data.frame(read.csv("/Users/don/Desktop/BTC/bpi_price.csv", header=TRUE, stringsAsFactors=FALSE))
price <<- subset(price, Close > 0)
cat("bpi_price.csv imported as price data frame.\n")
portfolio <<- data.frame(read.csv("/Users/don/Desktop/BTC/portfolio.csv", header=TRUE, stringsAsFactors=FALSE))
cat("portfolio.csv imported as portfolio data frame.\n")
#generate basic total calculations.
op <<- sum(as.numeric(portfolio$pos)) # = overall position
oi <<- sum(as.numeric(portfolio$pos)*as.numeric(portfolio$price)) # = overall investment
pb <<- oi/op # = price basis
cat("Overall variables created: op, oi, pb.\n")
#Generate Price Time Series
pmos <- length(seq(from=as.Date("2010-07-01"), to=Sys.Date(), by='month')) - 1
pmo_vec <- seq(as.Date("2010-07-01"), by = "month", length.out = pmos)
#Declare Time Series using length determined above:
pmo_high <<- ts(rep(0, times = pmos), frequency = 12, start = c(2010,7))
pmo_low <<- ts(rep(0, times = pmos), frequency = 12, start = c(2010,7))
#Now determine their values
for (i in 1:pmos){
price_sub <- subset(price, format.Date(Date, "%m")==format(pmo_vec[i], "%m") & format.Date(Date, "%y")==format(pmo_vec[i], "%y"))
pmo_high[i] <<- max(price_sub$Close)
pmo_low[i] <<- min(price_sub$Close)
}
cat("Price Time Series created: pmo_high, pmo_low.\n")
#Generate Time Series
#common variables for mo_xxx time series:
mos <- length(seq(from=as.Date("2013-11-01"), to=Sys.Date(), by='month')) - 1
mo_vec <- seq(as.Date("2013-12-01"), by = "month", length.out = mos)
#Declare Time Series using length determined above:
mo_investment <<- ts(rep(0, times = mos), frequency = 12, start=c(2013,11))
mo_position <<- ts(rep(0, times = mos), frequency = 12, start=c(2013,11))
mo_pricebasis <<- ts(rep(0, times = mos), frequency = 12, start=c(2013,11))
#Now determine their values
for (i in 1:mos){
port_sub <- subset(portfolio, date < mo_vec[i])
mo_investment[i] <<- sum(as.numeric(port_sub$pos)*as.numeric(port_sub$price))
mo_position[i] <<- sum(as.numeric(port_sub$pos))
mo_pricebasis[i] <<- mo_investment[i] / mo_position[i]
}
cat("Time Series created: mo_investment, mo_position, mo_pricebasis.\n")
mo_portfolio <<- data.frame(as.yearmon(mo_vec-1), mo_investment[1:18], mo_position[1:18], mo_pricebasis[1:18])
names(mo_portfolio) <<- c("Mon","Inv","Pos","PrB")
cat("mo_portfolio data frame created.\n")
cat("Workspace Prepared. Welcome.")
}
head(price)
Begin()
library("zoo", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
Begin()
head(price)
json3
length(json3)
names(json3)
names(json3[1])
a <- names(json3)
a
json3
mtcars
tmtcars
t(mtcars)
t(json3)
json3[1]
json3
json3[1,1]
class(json3)
json3 <- unlist(lapply(json2[1], function (x) x))
class(json3)
json3
names(json3)
names(json3[1])
json3[1]
json3[[1]]
a <- names(json3)
a
b <- json3[[1:31]]
b <- c(json3[[1:31]])
b <- c(json3[[]])
b <- json3[[]
]
json3[1]
json3[[1]]
c(json3[[1]], json3[[2]])
json3 <- unlist(lapply(json2[1], function (x) x))
a <- names(json3)
b <- json3[[1]]
for (i in length(json3)-1) {
b <<- c(b, json3[[i+1]])
}
a
b
json3 <- unlist(lapply(json2[1], function (x) x))
a <- names(json3)
b <- json3[[1]]
for (i in length(json3)-1) {
b <- c(b, json3[[i+1]])
}
b
length(json3)-1
json3
help(append)
json3 <- unlist(lapply(json2[1], function (x) x))
a <- names(json3)
b <- json3[[1]]
for (i in length(json3)-1) {
append(b, json3[[i]])
}
b
class(b)
class(a)
summary(a)
summary(b)
help(seq)
length(json3)
b <- seq(0, 1, length = 11)
b
b <- seq(0, 0, length = length(json3))
b
b[0] <- 1
b
b[5] <- 1
b
json3[[1]]
json3 <- unlist(lapply(json2[1], function (x) x))
a <- names(json3)
b <- seq(0, 0, length = length(json3))
for (i in length(json3)) {
b[i] <- json3[[i]]
}
b
json3 <- unlist(lapply(json2[1], function (x) x))
a <- names(json3)
b <- seq(0, 0, length = length(json3))
for (i in 1:length(json3)) {
b[i] <- json3[[i]]
}
b
json4 <- data.frame(a, b)
json4
new_price <- data.frame(a, b)
names(new_price) <- c(Date,Close)
new_price <- data.frame(a, b)
names(new_price) <- c("Date","Close")
new_price
head(price)
price[1]
price[1,1]
class(price[1,1])
Initiate()
library(jsonlite)
Initiate <- function(){
rm(list=ls())
price <<- data.frame(read.csv("/Users/don/Desktop/BTC/bpi_price.csv", header=TRUE, stringsAsFactors=FALSE))
price$Date <<- as.Date(price[,1], "%Y-%m-%d")
cat("bpi_price.csv imported as <price.df>; includes data up to",  toString(price[nrow(price),1]))
}
UpdatePrice <- function(){
json <- jsonlite::fromJSON("https://api.coindesk.com/v1/bpi/historical/close.json")
json2 <- unlist(lapply(json[1], function (x) x))
b <- seq(0, 0, length = length(json3))
for (i in 1:length(json2)) {
b[i] <- json2[[i]]
}
new_price <<- date.frame(names(json2), b)
}
Initiate()
Begin()
rm(list=ls())
library(jsonlite)
Initiate <- function(){
price <<- data.frame(read.csv("/Users/don/Desktop/BTC/bpi_price.csv", header=TRUE, stringsAsFactors=FALSE))
price$Date <<- as.Date(price[,1], "%Y-%m-%d")
cat("bpi_price.csv imported as <price.df>; includes data up to",  toString(price[nrow(price),1]))
}
UpdatePrice <- function(){
json <- jsonlite::fromJSON("https://api.coindesk.com/v1/bpi/historical/close.json")
json2 <- unlist(lapply(json[1], function (x) x))
b <- seq(0, 0, length = length(json3))
for (i in 1:length(json2)) {
b[i] <- json2[[i]]
}
new_price <<- date.frame(names(json2), b)
}
Initiate()
rm(list=ls())
ShinyGo <- function(){
library(shiny)
runApp("/Users/don/Desktop/Bitcoin")
}
ShinyGo()
source.AppFunctions.R
source(AppFunctions.R)
source('AppFunctions.R')
getwd()
setwd("/Users/don/Desktop/Bitcoin")
source('AppFunctions.R')
ShinyGo <- function(){
library(shiny)
setwd("/Users/don/Desktop/Bitcoin")
source('AppFunctions.R')
runApp("/Users/don/Desktop/Bitcoin")
}
ShinyGo()
rm(list=ls())
ShinyGo <- function(){
library(shiny)
setwd("/Users/don/Desktop/Bitcoin")
source('AppFunctions.R')
runApp("/Users/don/Desktop/Bitcoin")
}
ShinyGo()
ShinyGo()
ShinyGo()
class(this$price)
this <- data.frame(read.csv("portfolio.csv", header=TRUE, stringsAsFactors=FALSE))
this$pos2[1] <- this$pos[1]
this$investment[1] <- this$pos[1]*this$price[1]
this$pricebasis[1] <- this$investment[1]/this$pos[1]
for (i in 2:nrow(this)){
this$pos2[i] <- sum(this$pos[1:i])
this$investment[i] <- this$pos[i]*this$price[i]+this$investment[i-1]
this$pricebasis[i] <- this$investment[i]/this$pos2[i]
}
class(this$price)
class(this$)
head(this)
class(this$investment)
format(this$investment, nsmall = 2)
format(this$investment, nsmall = 1)
ShinyGo()
ShinyGo()
format(this$investment, digits = 1)
format(this$investment, digits = 2)
format(this$investment, digits = 3)
format(this$investment, digits = 4)
this$investment <- format(this$investment, digits = 4)
head(this)
ShinyGo()
tail(this)
this$pricebasis <- format(this$pricebasis, digits = 4)
head(this)
this$pricebasis <- format(this$pricebasis, digits = 5)
head(this)
this$pricebasis <- format(this$pricebasis, digits = 6)
head(this)
this$investment <- round(this$investment, digits=2)
format(round(this$investment, 2), nsmall = 2)
class(this$investment)
class(this)
class(this$pricebasis)
this <- data.frame(read.csv("portfolio.csv", header=TRUE, stringsAsFactors=FALSE))
this$pos2[1] <- this$pos[1]
this$investment[1] <- this$pos[1]*this$price[1]
this$pricebasis[1] <- this$investment[1]/this$pos[1]
for (i in 2:nrow(this)){
this$pos2[i] <- sum(this$pos[1:i])
this$investment[i] <- this$pos[i]*this$price[i]+this$investment[i-1]
this$pricebasis[i] <- this$investment[i]/this$pos2[i]
}
class(this$investment)
this$investment <- round(this$investment, digits=2)
head(this)
this$pos <- round(this$pos, digits = 4)
head(this)
ShinyGo()
ShinyGo()
ShinyGo()
rm(list=ls())
library(shiny)
library(datasets)
# Define server logic required to summarize and view the selected
# dataset
shinyServer(function(input, output) {
#get apps data:
disp_portfolio <- Portfolio()
# Return the requested dataset
datasetInput <- reactive({
switch(input$dataset,
"Portfolio" = disp_portfolio,)
})
# Show the first "n" observations
output$view <- renderDataTable({
datasetInput()
})
})
library(shiny)
# Define UI for dataset viewer application
shinyUI(navbarPage("BTC Data Explorer",
tabPanel("Raw Data",
sidebarLayout(
sidebarPanel(
selectInput("dataset", "Choose a dataset:",
choices = ("Portfolio"),
)),
mainPanel(
dataTableOutput("view")
)
)
)))
Portfolio <- function(){
this <- data.frame(read.csv("portfolio.csv", header=TRUE, stringsAsFactors=FALSE))
this$pos2[1] <- this$pos[1]
this$investment[1] <- this$pos[1]*this$price[1]
this$pricebasis[1] <- this$investment[1]/this$pos[1]
for (i in 2:nrow(this)){
this$pos2[i] <- sum(this$pos[1:i])
this$investment[i] <- this$pos[i]*this$price[i]+this$investment[i-1]
this$pricebasis[i] <- this$investment[i]/this$pos2[i]
}
this$pos <- round(this$pos, digits = 4)
this$pos2 <- round(this$pos2, digits = 4)
this$price <- round(this$price, digits = 2)
this$investment <- round(this$investment, digits=2)
this$pricebasis <- round(this$pricebasis, digits = 2)
names(this) <- c("Date", "Event Position", "Event Price", "Total Position", "Investment", "Price Basis")
return(this)
}
ShinyGo <- function(){
library(shiny)
setwd("/Users/don/Desktop/Bitcoin")
source('AppFunctions.R')
runApp("/Users/don/Desktop/Bitcoin")
}
ShinyGo()
ShinyDeploy <- function(){
library(shinyapps)
setwd("/Users/don/Desktop/Bitcoin")
deployApp()
}
ShinyDeploy()
ShinyDeploy()
ShinyGo()
ShinyDeploy()
ShinyDeploy()
ShinyDeploy()
mos <- length(seq(from=as.Date("2013-11-01"), to=Sys.Date(), by='month')) - 1
mos
mo_vec <- seq(as.Date("2013-12-01"), by = "month", length.out = mos)
mo_vec
yearmon(mo_vec[1])
library(zoo)
yearmon(mo_vec[1])
as.numeric(mo_vec[1])
yearmon(as.numeric(mo_vec[1]))
yearmon
help yearmon
help(yearmon)
as.yearmon(mo_vec[1])
as.yearmon(mo_vec)
help(rep)
rep(0, length.out = mos)
this <- data.frame(read.csv("portfolio.csv", header=TRUE, stringsAsFactors=FALSE))
mos <- length(seq(from=as.Date("2013-11-01"), to=Sys.Date(), by='month')) - 1
mo_vec <- seq(as.Date("2013-12-01"), by = "month", length.out = mos)
Month <- as.yearmon(mo_vec)
Position <- rep(0, length.out = mos)
Investment <- rep(0, length.out = mos)
PriceBasis <- rep(0, length.out = mos)
for (i in 1:mos){
port_sub <- subset(this, date < mo_vec[i])
Investment[i] <- sum(as.numeric(port_sub$pos)*as.numeric(port_sub$price))
Position[i] <- sum(as.numeric(port_sub$pos))
Pricebasis[i] <- Investment[i]/Position[i]
}
this2 <- data.frame(Month, Position, Investment, Price Basis)
csv("portfolio.csv", header=TRUE, stringsAsFactors=FALSE))
mos <- length(seq(from=as.Date("2013-11-01"), to=Sys.Date(), by='month')) - 1
mo_vec <- seq(as.Date("2013-12-01"), by = "month", length.out = mos)
Month <- as.yearmon(mo_vec)
Position <- rep(0, length.out = mos)
Investment <- rep(0, length.out = mos)
PriceBasis <- rep(0, length.out = mos)
for (i in 1:mos){
port_sub <- subset(this, date < mo_vec[i])
Investment[i] <- sum(as.numeric(port_sub$pos)*as.numeric(port_sub$price))
Position[i] <- sum(as.numeric(port_sub$pos))
Pricebasis[i] <- Investment[i]/Position[i]
}
this2 <- data.frame(Month, Position, Investment, Price
this <- data.frame(read.csv("portfolio.csv", header=TRUE, stringsAsFactors=FALSE))
mos <- length(seq(from=as.Date("2013-11-01"), to=Sys.Date(), by='month')) - 1
mo_vec <- seq(as.Date("2013-12-01"), by = "month", length.out = mos)
Month <- as.yearmon(mo_vec)
Position <- rep(0, length.out = mos)
Investment <- rep(0, length.out = mos)
PriceBasis <- rep(0, length.out = mos)
for (i in 1:mos){
port_sub <- subset(this, date < mo_vec[i])
Investment[i] <- sum(as.numeric(port_sub$pos)*as.numeric(port_sub$price))
Position[i] <- sum(as.numeric(port_sub$pos))
PriceBasis[i] <- Investment[i]/Position[i]
}
this2 <- data.frame(Month, Position, Investment, PriceBasis)
head(this2)
this2$Position <- round(this2$Position, digits = 2)
head(this)
head(this2)
ShinyGo <- function(){
library(shiny)
setwd("/Users/don/Desktop/Bitcoin")
source('AppFunctions.R')
runApp("/Users/don/Desktop/Bitcoin")
}
ShinyGo()
ShinyGo()
ShinyGo()
ShinyGo()
ShinyGo()
ShinyGo()
ShinyGo()
pmos
ShinyGo()
mos <- length(seq(from=as.Date("2013-11-01"), to=Sys.Date(), by='month'))
mos
ShinyGo()
ShinyGo()
ShinyGo()
ShinyGo()
ShinyGo()
ShinyGo()
ShinyGo()
ShinyGo()
ShinyGo()
ShinyGo()
ShinyDeploy <- function(){
library(shinyapps)
setwd("/Users/don/Desktop/Bitcoin")
deployApp()
}
ShinyDeploy()
ShinyDeploy()
ShinyGo()
ShinyGo()
ShinyGo()
ShinyGo()
