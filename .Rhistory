mos <- length(seq(from=as.Date("2013-11-01"), to=Sys.Date(), by='month')) - 1
mo_vec <- seq(as.Date("2013-12-01"), by = "month", length.out = mos)
#Declare Time Series using length determined above:
mo_investment <<- ts(rep(0, times = mos), frequency = 12, start=c(2013,11))
mo_position <<- ts(rep(0, times = mos), frequency = 12, start=c(2013,11))
mo_pricebasis <<- ts(rep(0, times = mos), frequency = 12, start=c(2013,11))
#Now determine their values
for (i in 1:mos){
port_sub <- subset(portfolio, date < mo_vec[i])
mo_investment[i] <<- sum(as.numeric(port_sub$pos)*as.numeric(port_sub$price))
mo_position[i] <<- sum(as.numeric(port_sub$pos))
mo_pricebasis[i] <<- mo_investment[i] / mo_position[i]
}
cat("Time Series created: mo_investment, mo_position, mo_pricebasis.\n")
mo_portfolio <<- data.frame(as.yearmon(mo_vec-1), mo_investment[1:18], mo_position[1:18], mo_pricebasis[1:18])
names(mo_portfolio) <<- c("Mon","Inv","Pos","PrB")
cat("mo_portfolio data frame created.\n")
cat("Workspace Prepared. Welcome.")
}
head(price)
Begin()
library("zoo", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
Begin()
head(price)
json3
length(json3)
names(json3)
names(json3[1])
a <- names(json3)
a
json3
mtcars
tmtcars
t(mtcars)
t(json3)
json3[1]
json3
json3[1,1]
class(json3)
json3 <- unlist(lapply(json2[1], function (x) x))
class(json3)
json3
names(json3)
names(json3[1])
json3[1]
json3[[1]]
a <- names(json3)
a
b <- json3[[1:31]]
b <- c(json3[[1:31]])
b <- c(json3[[]])
b <- json3[[]
]
json3[1]
json3[[1]]
c(json3[[1]], json3[[2]])
json3 <- unlist(lapply(json2[1], function (x) x))
a <- names(json3)
b <- json3[[1]]
for (i in length(json3)-1) {
b <<- c(b, json3[[i+1]])
}
a
b
json3 <- unlist(lapply(json2[1], function (x) x))
a <- names(json3)
b <- json3[[1]]
for (i in length(json3)-1) {
b <- c(b, json3[[i+1]])
}
b
length(json3)-1
json3
help(append)
json3 <- unlist(lapply(json2[1], function (x) x))
a <- names(json3)
b <- json3[[1]]
for (i in length(json3)-1) {
append(b, json3[[i]])
}
b
class(b)
class(a)
summary(a)
summary(b)
help(seq)
length(json3)
b <- seq(0, 1, length = 11)
b
b <- seq(0, 0, length = length(json3))
b
b[0] <- 1
b
b[5] <- 1
b
json3[[1]]
json3 <- unlist(lapply(json2[1], function (x) x))
a <- names(json3)
b <- seq(0, 0, length = length(json3))
for (i in length(json3)) {
b[i] <- json3[[i]]
}
b
json3 <- unlist(lapply(json2[1], function (x) x))
a <- names(json3)
b <- seq(0, 0, length = length(json3))
for (i in 1:length(json3)) {
b[i] <- json3[[i]]
}
b
json4 <- data.frame(a, b)
json4
new_price <- data.frame(a, b)
names(new_price) <- c(Date,Close)
new_price <- data.frame(a, b)
names(new_price) <- c("Date","Close")
new_price
head(price)
price[1]
price[1,1]
class(price[1,1])
Initiate()
library(jsonlite)
Initiate <- function(){
rm(list=ls())
price <<- data.frame(read.csv("/Users/don/Desktop/BTC/bpi_price.csv", header=TRUE, stringsAsFactors=FALSE))
price$Date <<- as.Date(price[,1], "%Y-%m-%d")
cat("bpi_price.csv imported as <price.df>; includes data up to",  toString(price[nrow(price),1]))
}
UpdatePrice <- function(){
json <- jsonlite::fromJSON("https://api.coindesk.com/v1/bpi/historical/close.json")
json2 <- unlist(lapply(json[1], function (x) x))
b <- seq(0, 0, length = length(json3))
for (i in 1:length(json2)) {
b[i] <- json2[[i]]
}
new_price <<- date.frame(names(json2), b)
}
Initiate()
Begin()
rm(list=ls())
library(jsonlite)
Initiate <- function(){
price <<- data.frame(read.csv("/Users/don/Desktop/BTC/bpi_price.csv", header=TRUE, stringsAsFactors=FALSE))
price$Date <<- as.Date(price[,1], "%Y-%m-%d")
cat("bpi_price.csv imported as <price.df>; includes data up to",  toString(price[nrow(price),1]))
}
UpdatePrice <- function(){
json <- jsonlite::fromJSON("https://api.coindesk.com/v1/bpi/historical/close.json")
json2 <- unlist(lapply(json[1], function (x) x))
b <- seq(0, 0, length = length(json3))
for (i in 1:length(json2)) {
b[i] <- json2[[i]]
}
new_price <<- date.frame(names(json2), b)
}
Initiate()
Sys.Date()
Sys.Date() - "2011-09-13"
class(Sys.Date())
Sys.Date() - as.Date("2011-09-13")
Sys.Date() - as.Date("2011-09-14")
snippet
myData <- read.csv('data.csv.gz', header=FALSE)
#Above downloads, now we have myData ready to be manipulated.
#Initial build of bistampUSD table. Ready for iterative loop to complete:
snippet <- subset(myData, as.POSIXct(myData$V1, origin = "1970-01-01") < "2011-09-14")
VWAP <- sum(snippet$V2*snippet$V3)/sum(snippet$V3)
Vol <- sum(snippet$V3)
Date <- as.Date(as.POSIXct("2011-09-13"))
bitstampUSD <- data.frame(Date, VWAP, Vol, stringsAsFactors = FALSE)
myData <- myData[-c(1:nrow(snippet)),]
getwd
getwd()
setwd("/Users/don/Desktop/Bitcoin"
)
myData <- read.csv('data.csv.gz', header=FALSE)
#Above downloads, now we have myData ready to be manipulated.
#Initial build of bistampUSD table. Ready for iterative loop to complete:
snippet <- subset(myData, as.POSIXct(myData$V1, origin = "1970-01-01") < "2011-09-14")
VWAP <- sum(snippet$V2*snippet$V3)/sum(snippet$V3)
Vol <- sum(snippet$V3)
Date <- as.Date(as.POSIXct("2011-09-13"))
bitstampUSD <- data.frame(Date, VWAP, Vol, stringsAsFactors = FALSE)
myData <- myData[-c(1:nrow(snippet)),]
bitstampUSD
head(myData)
snippet
bitstampUSD
bitstampUpdate()
bitstampUpdate <- function(){
Date <- as.Date(as.POSIXct("2011-09-13")) + nrow(bitstampUSD)
snippet <- subset(myData, as.Date(as.POSIXct(myData$V1, origin = "1970-01-01")) < Date+1)
VWAP <- sum(snippet$V2*snippet$V3)/sum(snippet$V3)
Vol <- sum(snippet$V3)
bitstampUSD[nrow(bitstampUSD)+1,1] <<- Date
bitstampUSD[nrow(bitstampUSD),2] <<- VWAP
bitstampUSD[nrow(bitstampUSD),3] <<- Vol
#added if statement to avoid dropping data on 0-volume days
if (nrow(snippet)>0){myData <<- myData[-c(1:nrow(snippet)),]}
}
bitstampUpdate()
head(myData)
read.csv(url("http://api.bitcoincharts.com/v1/trades.csv?symbol=bitstampUSD&start=1315922016"))
Sys.Date() - as.Date("2011-09-13")
Sys.Date() - as.Date("2011-09-14")
bitstampUSD
for (i in 1:98){
bitstampUpdate()
}
ShinyGo <- function(){
library(shiny)
setwd("/Users/don/Desktop/Bitcoin")
source('AppFunctions.R')
runApp("/Users/don/Desktop/Bitcoin")
}
ShinyGo()
ShinyDeploy <- function(){
library(shinyapps)
setwd("/Users/don/Desktop/Bitcoin")
deployApp()
}
install.package(jsonlite)
install.packages(jsonlite)
Initiate <- function(){
#Set Working Directory
setwd("/Users/don/Desktop/Bitcoin")
#Import Source Data as data frames
price <<- data.frame(read.csv("bpi_price.csv", header=TRUE, stringsAsFactors=FALSE))
price$Date <<- as.Date(price[,1], "%Y-%m-%d")
cat("bpi_price.csv imported as <price.df>; includes data up to",  toString(price[nrow(price),1]), "\n")
portfolio <<- data.frame(read.csv("/Users/don/Desktop/Bitcoin/portfolio.csv", header=TRUE, stringsAsFactors=FALSE))
portfolio$date <<- as.Date(portfolio[,1], "%Y-%m-%d")
cat("portfolio.csv imported as <portfolio.df>\n")
#Generate inv_val data frame
iv_date <- seq(from = portfolio[1,1], to = price[nrow(price),1], by = "days")
iv_price <- subset(price, price$Date >= portfolio[1,1])
iv_pos <- rep(0, length(iv_date))
iv_inv <- rep(0, length(iv_date))
for (i in 1:length(iv_date)){
port_sub <- subset(portfolio, portfolio$date <= iv_date[i])
iv_pos[i] <- sum(port_sub$pos)
iv_inv[i] <- sum(port_sub$pos*port_sub$price)
}
inv_val <<- data.frame(iv_date, iv_price$Close*iv_pos, iv_inv, (iv_price$Close*iv_pos)/iv_inv)
names(inv_val) <<- c("Date", "Value", "Investment", "Percent")
cat("Source Data used to generate <inv_val.df>\n")
#Generate Price Time Series
pmos <- length(seq(from=as.Date("2010-07-01"), to=Sys.Date(), by='month')) - 1
pmo_vec <- seq(as.Date("2010-07-01"), by = "month", length.out = pmos)
#Declare Time Series using length determined above:
pmo_high <<- ts(rep(0, times = pmos), frequency = 12, start = c(2010,7))
pmo_low <<- ts(rep(0, times = pmos), frequency = 12, start = c(2010,7))
#Now determine their values
for (i in 1:pmos){
price_sub <- subset(price, format.Date(Date, "%m")==format(pmo_vec[i], "%m") & format.Date(Date, "%y")==format(pmo_vec[i], "%y"))
pmo_high[i] <<- max(price_sub$Close)
pmo_low[i] <<- min(price_sub$Close)
}
cat("Price Time Series created: <pmo_high.ts>, <pmo_low.ts>\n")
#Generate Time Series
#common variables for mo_xxx time series:
mos <- length(seq(from=as.Date("2013-11-01"), to=Sys.Date(), by='month')) - 1
mo_vec <- seq(as.Date("2013-12-01"), by = "month", length.out = mos)
#Declare Time Series using length determined above:
mo_investment <<- ts(rep(0, times = mos), frequency = 12, start=c(2013,11))
mo_position <<- ts(rep(0, times = mos), frequency = 12, start=c(2013,11))
mo_pricebasis <<- ts(rep(0, times = mos), frequency = 12, start=c(2013,11))
#Now determine their values
for (i in 1:mos){
port_sub <- subset(portfolio, date < mo_vec[i])
mo_investment[i] <<- sum(as.numeric(port_sub$pos)*as.numeric(port_sub$price))
mo_position[i] <<- sum(as.numeric(port_sub$pos))
mo_pricebasis[i] <<- mo_investment[i] / mo_position[i]
}
cat("Time Series created: <mo_investment.ts>, <mo_position.ts>, <mo_pricebasis.ts>\n")
mo_portfolio <<- data.frame(as.yearmon(mo_vec-1), mo_investment[1:mos], mo_position[1:mos], mo_pricebasis[1:mos])
names(mo_portfolio) <<- c("Mon","Inv","Pos","PrB")
cat("portfolio.csv used to generate <mo_portfolio.df>\n")
#prepare special shiny datasets
sportfolio <<- portfolio
sportfolio$date <<- as.character(portfolio$date)
sprice <<- price
sprice$Date <<- as.character(price$Date)
sinv_val <<- inv_val
sinv_val$Date <<- as.character(inv_val$Date)
cat("<sportfolio.df>, <sprice.df> and <sinv_val.df> created for Shiny.\n")
cat("Workspace Prepared. Welcome.")
}
UpdatePrice <- function(){
suppressWarnings(json <- jsonlite::fromJSON("https://api.coindesk.com/v1/bpi/historical/close.json"))
json2 <- unlist(lapply(json[1], function (x) x))
b <- seq(0, 0, length = length(json2))
for (i in 1:length(json2)) {
b[i] <- json2[[i]]
}
new_price <- data.frame(names(json2), b)
names(new_price) <- c("Date","Close")
np_dates <- as.Date(new_price[,1], "bpi.%Y-%m-%d")
new_price$Date <- np_dates
from_old_price <- subset(price, Date >= new_price[1,1])
amt <- nrow(new_price) - nrow(from_old_price)
while (TRUE){
if (amt == 0){
stop("No Updates Available")
}
for (i in 1:(nrow(new_price)-amt)){
if (from_old_price[i,2] != new_price[i,2]){
stop("Old and New Price data do not match")
}
}
to_add <- tail(new_price, amt)
price <<- rbind(price, to_add)
rownames(price) <<- 1:nrow(price)
cat("<price.df> updated with", amt, "new values.\n")
write.csv(price, file = "/Users/don/Desktop/BTC/bpi_price.csv", row.names=FALSE)
cat("bpi_price.csv updated to match new <price.df> values.")
break
}
}
Graph <- function(months){
#verify input:
if (!is.numeric(months)){
stop("Invalid entry; Not a number")
}
if (months > length(pmo_high)){
stop("Invalid entry; Too many months - Max is ", length(pmo_high), "\n")
}
#generate year & mon:
year <- as.numeric(format(Sys.Date(), "%Y")) - (floor(months/12))
mon <- as.numeric(format(Sys.Date(), "%m")) - (months %% 12)
high <- window(pmo_high, c(year, mon))
low <- window(pmo_low, c(year, mon))
if (months > length(mo_pricebasis)){
pbpb <- mo_pricebasis
} else {
pbpb <- window(mo_pricebasis, c(year, mon))
}
ts.plot(high, low, pbpb, gpars=list(xlab="Time", ylab="Price", col = c("red", "blue", "black"), axes=F))
time <- seq(as.Date(Sys.Date()), length.out=months, by = "-1 month")
time <- as.yearmon(time)
axis(1, labels = rev(time), at=time(high))
axis(2)
box()
}
#Incredibly close. Only oddity is the behavior of the tick marks in longer data sets.
ShinyGo <- function(){
library(shiny)
setwd("/Users/don/Desktop/Bitcoin")
source('AppFunctions.R')
runApp("/Users/don/Desktop/Bitcoin")
}
ShinyDeploy <- function(){
library(shinyapps)
setwd("/Users/don/Desktop/Bitcoin")
deployApp()
}
BuildPortfolio <- function(){
return(data.frame(read.csv("portfolio.csv", header=TRUE, stringsAsFactors=FALSE)))
}
Initiate()
Initiate <- function(){
Initiate <- function(){
#Set Working Directory
setwd("/Users/don/Desktop/Bitcoin")
#Import Source Data as data frames
price <<- data.frame(read.csv("bpi_price.csv", header=TRUE, stringsAsFactors=FALSE))
price$Date <<- as.Date(price[,1], "%Y-%m-%d")
cat("bpi_price.csv imported as <price.df>; includes data up to",  toString(price[nrow(price),1]), "\n")
portfolio <<- data.frame(read.csv("/Users/don/Desktop/Bitcoin/portfolio.csv", header=TRUE, stringsAsFactors=FALSE))
portfolio$date <<- as.Date(portfolio[,1], "%Y-%m-%d")
cat("portfolio.csv imported as <portfolio.df>\n")
#Generate inv_val data frame
iv_date <- seq(from = portfolio[1,1], to = price[nrow(price),1], by = "days")
iv_price <- subset(price, price$Date >= portfolio[1,1])
iv_pos <- rep(0, length(iv_date))
iv_inv <- rep(0, length(iv_date))
for (i in 1:length(iv_date)){
port_sub <- subset(portfolio, portfolio$date <= iv_date[i])
iv_pos[i] <- sum(port_sub$pos)
iv_inv[i] <- sum(port_sub$pos*port_sub$price)
}
inv_val <<- data.frame(iv_date, iv_price$Close*iv_pos, iv_inv, (iv_price$Close*iv_pos)/iv_inv)
names(inv_val) <<- c("Date", "Value", "Investment", "Percent")
cat("Source Data used to generate <inv_val.df>\n")
#Generate Price Time Series
pmos <- length(seq(from=as.Date("2010-07-01"), to=Sys.Date(), by='month')) - 1
pmo_vec <- seq(as.Date("2010-07-01"), by = "month", length.out = pmos)
#Declare Time Series using length determined above:
pmo_high <<- ts(rep(0, times = pmos), frequency = 12, start = c(2010,7))
pmo_low <<- ts(rep(0, times = pmos), frequency = 12, start = c(2010,7))
#Now determine their values
for (i in 1:pmos){
price_sub <- subset(price, format.Date(Date, "%m")==format(pmo_vec[i], "%m") & format.Date(Date, "%y")==format(pmo_vec[i], "%y"))
pmo_high[i] <<- max(price_sub$Close)
pmo_low[i] <<- min(price_sub$Close)
}
cat("Price Time Series created: <pmo_high.ts>, <pmo_low.ts>\n")
#Generate Time Series
#common variables for mo_xxx time series:
mos <- length(seq(from=as.Date("2013-11-01"), to=Sys.Date(), by='month')) - 1
mo_vec <- seq(as.Date("2013-12-01"), by = "month", length.out = mos)
#Declare Time Series using length determined above:
mo_investment <<- ts(rep(0, times = mos), frequency = 12, start=c(2013,11))
mo_position <<- ts(rep(0, times = mos), frequency = 12, start=c(2013,11))
mo_pricebasis <<- ts(rep(0, times = mos), frequency = 12, start=c(2013,11))
#Now determine their values
for (i in 1:mos){
port_sub <- subset(portfolio, date < mo_vec[i])
mo_investment[i] <<- sum(as.numeric(port_sub$pos)*as.numeric(port_sub$price))
mo_position[i] <<- sum(as.numeric(port_sub$pos))
mo_pricebasis[i] <<- mo_investment[i] / mo_position[i]
}
cat("Time Series created: <mo_investment.ts>, <mo_position.ts>, <mo_pricebasis.ts>\n")
mo_portfolio <<- data.frame(as.yearmon(mo_vec-1), mo_investment[1:mos], mo_position[1:mos], mo_pricebasis[1:mos])
names(mo_portfolio) <<- c("Mon","Inv","Pos","PrB")
cat("portfolio.csv used to generate <mo_portfolio.df>\n")
#prepare special shiny datasets
sportfolio <<- portfolio
sportfolio$date <<- as.character(portfolio$date)
sprice <<- price
sprice$Date <<- as.character(price$Date)
sinv_val <<- inv_val
sinv_val$Date <<- as.character(inv_val$Date)
cat("<sportfolio.df>, <sprice.df> and <sinv_val.df> created for Shiny.\n")
cat("Workspace Prepared. Welcome.")
}
)
Initiate <- function(){
#Set Working Directory
setwd("/Users/don/Desktop/Bitcoin")
#Import Source Data as data frames
price <<- data.frame(read.csv("bpi_price.csv", header=TRUE, stringsAsFactors=FALSE))
price$Date <<- as.Date(price[,1], "%Y-%m-%d")
cat("bpi_price.csv imported as <price.df>; includes data up to",  toString(price[nrow(price),1]), "\n")
portfolio <<- data.frame(read.csv("/Users/don/Desktop/Bitcoin/portfolio.csv", header=TRUE, stringsAsFactors=FALSE))
portfolio$date <<- as.Date(portfolio[,1], "%Y-%m-%d")
cat("portfolio.csv imported as <portfolio.df>\n")
#Generate inv_val data frame
iv_date <- seq(from = portfolio[1,1], to = price[nrow(price),1], by = "days")
iv_price <- subset(price, price$Date >= portfolio[1,1])
iv_pos <- rep(0, length(iv_date))
iv_inv <- rep(0, length(iv_date))
for (i in 1:length(iv_date)){
port_sub <- subset(portfolio, portfolio$date <= iv_date[i])
iv_pos[i] <- sum(port_sub$pos)
iv_inv[i] <- sum(port_sub$pos*port_sub$price)
}
inv_val <<- data.frame(iv_date, iv_price$Close*iv_pos, iv_inv, (iv_price$Close*iv_pos)/iv_inv)
names(inv_val) <<- c("Date", "Value", "Investment", "Percent")
cat("Source Data used to generate <inv_val.df>\n")
#Generate Price Time Series
pmos <- length(seq(from=as.Date("2010-07-01"), to=Sys.Date(), by='month')) - 1
pmo_vec <- seq(as.Date("2010-07-01"), by = "month", length.out = pmos)
#Declare Time Series using length determined above:
pmo_high <<- ts(rep(0, times = pmos), frequency = 12, start = c(2010,7))
pmo_low <<- ts(rep(0, times = pmos), frequency = 12, start = c(2010,7))
#Now determine their values
for (i in 1:pmos){
price_sub <- subset(price, format.Date(Date, "%m")==format(pmo_vec[i], "%m") & format.Date(Date, "%y")==format(pmo_vec[i], "%y"))
pmo_high[i] <<- max(price_sub$Close)
pmo_low[i] <<- min(price_sub$Close)
}
cat("Price Time Series created: <pmo_high.ts>, <pmo_low.ts>\n")
#Generate Time Series
#common variables for mo_xxx time series:
mos <- length(seq(from=as.Date("2013-11-01"), to=Sys.Date(), by='month')) - 1
mo_vec <- seq(as.Date("2013-12-01"), by = "month", length.out = mos)
#Declare Time Series using length determined above:
mo_investment <<- ts(rep(0, times = mos), frequency = 12, start=c(2013,11))
mo_position <<- ts(rep(0, times = mos), frequency = 12, start=c(2013,11))
mo_pricebasis <<- ts(rep(0, times = mos), frequency = 12, start=c(2013,11))
#Now determine their values
for (i in 1:mos){
port_sub <- subset(portfolio, date < mo_vec[i])
mo_investment[i] <<- sum(as.numeric(port_sub$pos)*as.numeric(port_sub$price))
mo_position[i] <<- sum(as.numeric(port_sub$pos))
mo_pricebasis[i] <<- mo_investment[i] / mo_position[i]
}
cat("Time Series created: <mo_investment.ts>, <mo_position.ts>, <mo_pricebasis.ts>\n")
mo_portfolio <<- data.frame(as.yearmon(mo_vec-1), mo_investment[1:mos], mo_position[1:mos], mo_pricebasis[1:mos])
names(mo_portfolio) <<- c("Mon","Inv","Pos","PrB")
cat("portfolio.csv used to generate <mo_portfolio.df>\n")
#prepare special shiny datasets
sportfolio <<- portfolio
sportfolio$date <<- as.character(portfolio$date)
sprice <<- price
sprice$Date <<- as.character(price$Date)
sinv_val <<- inv_val
sinv_val$Date <<- as.character(inv_val$Date)
cat("<sportfolio.df>, <sprice.df> and <sinv_val.df> created for Shiny.\n")
cat("Workspace Prepared. Welcome.")
}
Initiate()
mo_portfolio
head(mo_portfolio)
mo_portfolio[1,1]
mo_portfolio[1,5]
mo_portfolio[1,4]
mo_portfolio[15,4]
mo_portfolio$Mon
mo_portfolio$Mon[5]
mo_portfolio$Mon[5-2]
mo_portfolio$Mon[(5-2)^2]
mo_portfolio$Mon[length(mo_portfolio$Mon)]
runApp()
help(tabPanel)
ShinyGo()
ShinyGo()
ShinyGo()
ShinyGo()
help(require)
